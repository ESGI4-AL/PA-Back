name: CI Backend
on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  dependencies:
    name: Check NPM Installation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Verify node_modules
        run: |
          echo "Dependencies installed successfully!"
          echo "node_modules size:"
          du -sh node_modules/ || echo "node_modules directory not found"
          echo "Checking for common dependency issues..."
          npm ls --depth=0 || echo "Some peer dependency warnings may exist"

  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

  syntax-check:
    name: JavaScript Syntax Check
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Check JavaScript syntax
        run: |
          echo "Checking JavaScript syntax..."
          find . -name "*.js" -not -path "./node_modules/*" -exec node -c {} \;
          echo "JavaScript syntax check completed!"

  database-check:
    name: Database Connection Check
    runs-on: ubuntu-latest
    needs: dependencies
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      NODE_ENV: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Test database connection
        run: |
          # Simple database connection test
          node -e "
          const { Client } = require('pg');
          const client = new Client({
            connectionString: process.env.DATABASE_URL
          });
          client.connect()
            .then(() => {
              console.log('Database connection successful!');
              return client.query('SELECT NOW()');
            })
            .then(result => {
              console.log('Database query successful:', result.rows[0]);
              client.end();
            })
            .catch(err => {
              console.error('Database connection failed:', err);
              process.exit(1);
            });
          "

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run security audit
        run: npm audit --audit-level moderate
      - name: Check for known vulnerabilities
        run: |
          echo "Checking for common security issues..."
          # Check for common security patterns
          if [ -f ".env" ]; then
            echo "Warning: .env file found in repository!"
          fi
          if grep -r "password.*=" --include="*.js" --include="*.ts" .; then
            echo "Warning: Potential hardcoded passwords found!"
          fi

  startup-test:
    name: Application Startup Test
    runs-on: ubuntu-latest
    needs: [dependencies, lint, database-check]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: test_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      NODE_ENV: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Test application startup
        run: |
          echo "Testing if the application can start..."
          # Test that the app can start (timeout after 30 seconds)
          timeout 30s npm run dev &
          APP_PID=$!
          sleep 10

          if kill -0 $APP_PID 2>/dev/null; then
            echo "Application started successfully!"
            kill $APP_PID
            wait $APP_PID 2>/dev/null
          else
            echo "Application failed to start"
            exit 1
          fi